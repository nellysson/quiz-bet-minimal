"use server"
import { MapaAstralCache } from "../utils/cache-manager"
import { generateFallbackMapaAstral } from "../utils/fallback-generator"
import { sanitizeHtml } from "../utils/html-sanitizer"

interface MapaAstralParams {
  nome: string
  dataNascimento: string
  horaNascimento: string
  cidade: string
  pais: string
}

export async function generateMapaAstral(params: MapaAstralParams): Promise<string> {
  const { nome, dataNascimento, horaNascimento, cidade, pais } = params

  // Verificar se temos este mapa astral em cache
  const cache = MapaAstralCache.getInstance()
  const cachedResult = cache.get(params)

  if (cachedResult) {
    console.log("Retornando resultado do cache para:", nome)
    return cachedResult
  }

  try {
    console.log("Gerando mapa astral para:", nome)

    // Obter a chave API diretamente da vari√°vel de ambiente
    const apiKey = process.env.OPENAI_API_KEY

    console.log("Status da chave API:", apiKey ? "Presente" : "Ausente")

    if (!apiKey) {
      console.log("Chave API n√£o encontrada, usando fallback")
      const fallbackResult = generateFallbackMapaAstral(params)
      const sanitizedResult = sanitizeHtml(fallbackResult)
      cache.set(params, sanitizedResult)
      return sanitizedResult
    }

    const prompt = `Voc√™ √© um astr√≥logo experiente e criador de conte√∫do para sites de astrologia. Com base nas informa√ß√µes abaixo, gere um mapa astral completo, dividido em t√≥picos, com linguagem envolvente, acess√≠vel e bem organizada visualmente, como se fosse publicado em um site profissional.

Dados do usu√°rio:

Nome: ${nome}

Data de nascimento: ${dataNascimento}

Hora de nascimento: ${horaNascimento}

Cidade de nascimento: ${cidade}

Pa√≠s de nascimento: ${pais}

Gere os seguintes t√≥picos, com subt√≠tulos e emojis para enriquecer a apresenta√ß√£o visual do conte√∫do. Use HTML simples sem classes CSS complexas:

<div>
  <h1>Mapa Astral para ${nome}</h1>

  <div>
    <h2>üåû Signo Solar</h2>
    
    <p><strong>[Nome do signo]</strong></p>
    
    <p>[Caracter√≠sticas principais]</p>
    
    <p>[Energia e personalidade dominante]</p>
    
    <p>[Pontos fortes e desafios]</p>
  </div>

  <!-- Continue este formato para cada se√ß√£o -->
</div>

Siga este formato para cada se√ß√£o, garantindo espa√ßamento adequado entre par√°grafos e se√ß√µes.

T√≥picos a incluir:

üåû Signo Solar
- Nome do signo
- Caracter√≠sticas principais
- Energia e personalidade dominante
- Pontos fortes e desafios

üåô Signo Lunar
- Nome do signo
- Como a pessoa lida com as emo√ß√µes
- Seguran√ßa emocional e afetividade
- Rela√ß√µes familiares e da inf√¢ncia

‚¨ÜÔ∏è Ascendente
- Nome do signo
- Primeira impress√£o que transmite
- Estilo pessoal e comportamento social

ü™ê Planetas Pessoais (resumo)
- Sol, Lua, Merc√∫rio, V√™nus e Marte
- Explica√ß√µes breves sobre o impacto de cada planeta na vida do usu√°rio
- Linguagem simples e cotidiana (evite termos t√©cnicos complexos)

üè† Casas Astrol√≥gicas (resumo)
- Destaque 2 ou 3 casas com posicionamentos importantes
- Relacione com temas como amor, carreira, espiritualidade

üí´ Tend√™ncias C√°rmicas e Espirituais
- O que a combina√ß√£o dos signos revela sobre li√ß√µes de vida
- Potenciais desafios e evolu√ß√£o da alma

üå† Mensagem Final
- Crie uma mensagem inspiradora e personalizada com base no conjunto geral do mapa astral.
- Estimule o autoconhecimento, com um tom acolhedor e po√©tico.
- Esta mensagem final deve ter pelo menos 1500 caracteres e ser profunda e significativa.

Instru√ß√µes de Estilo:
- Use formata√ß√£o HTML simples com tags <h1>, <h2>, <p>, <strong>, etc.
- Linguagem envolvente, acolhedora e m√≠stica
- N√ÉO INCLUA SUGEST√ïES DE IMAGENS no texto, apenas o conte√∫do textual do mapa astral
- N√ÉO USE MARKDOWN, apenas HTML simples
- N√ÉO INCLUA BLOCOS DE C√ìDIGO OU TAGS \`\`\`html no in√≠cio ou fim do conte√∫do`

    console.log("Enviando prompt para a API OpenAI")

    try {
      // Usar fetch diretamente para ter mais controle sobre a requisi√ß√£o
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model: "gpt-4o", // Atualizado para GPT-4o
          messages: [
            {
              role: "system",
              content:
                "Voc√™ √© um astr√≥logo experiente especializado em mapas astrais. Crie conte√∫do rico e detalhado com formata√ß√£o HTML simples, garantindo bom espa√ßamento entre par√°grafos e se√ß√µes. N√ÉO use Markdown, apenas HTML simples. N√ÉO inclua blocos de c√≥digo ou tags ```html no in√≠cio ou fim do conte√∫do.",
            },
            {
              role: "user",
              content: prompt,
            },
          ],
          temperature: 0.7,
          max_tokens: 4000, // Aumentado para acomodar a mensagem final mais longa
        }),
      })

      console.log("Status da resposta:", response.status)

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}))
        console.error("Erro da API OpenAI:", errorData)
        throw new Error(`Erro na API OpenAI: ${response.status}`)
      }

      const data = await response.json()
      console.log("Resposta recebida com sucesso")

      const result = data.choices[0].message.content
      console.log("Conte√∫do bruto recebido:", result.substring(0, 100) + "...")

      // Sanitizar o HTML antes de armazenar em cache
      const sanitizedResult = sanitizeHtml(result)

      // Armazenar o resultado em cache
      cache.set(params, sanitizedResult)

      return sanitizedResult
    } catch (fetchError) {
      console.error("Erro detalhado na chamada fetch:", fetchError)

      // Em caso de erro na API, usar o gerador de fallback
      console.log("Usando gerador de fallback devido a erro na API")
      const fallbackResult = generateFallbackMapaAstral(params)
      const sanitizedResult = sanitizeHtml(fallbackResult)
      cache.set(params, sanitizedResult)
      return sanitizedResult
    }
  } catch (error) {
    console.error("Erro geral ao gerar mapa astral:", error)

    // Em caso de qualquer erro, usar o gerador de fallback
    const fallbackResult = generateFallbackMapaAstral(params)
    const sanitizedResult = sanitizeHtml(fallbackResult)
    cache.set(params, sanitizedResult)
    return sanitizedResult
  }
}
