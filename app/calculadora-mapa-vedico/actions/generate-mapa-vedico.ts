"use server"

interface MapaVedicoParams {
  nome: string
  dataNascimento: string
  horaNascimento: string
  cidade: string
  pais: string
}

export async function generateMapaVedico(params: MapaVedicoParams): Promise<string> {
  const { nome, dataNascimento, horaNascimento, cidade, pais } = params

  try {
    console.log("Gerando mapa v√©dico para:", nome)

    // Obter a chave API diretamente da vari√°vel de ambiente
    const apiKey = process.env.OPENAI_API_KEY

    console.log("Status da chave API:", apiKey ? "Presente" : "Ausente")

    if (!apiKey) {
      throw new Error("Chave API n√£o encontrada")
    }

    const prompt = `Voc√™ √© um astr√≥logo v√©dico tradicional, com experi√™ncia em astrologia Jyotish e habilidade em explicar mapas de forma acess√≠vel e envolvente.

Com base nas seguintes informa√ß√µes de nascimento:

Nome: ${nome}

Data de nascimento: ${dataNascimento}

Hora de nascimento: ${horaNascimento}

Cidade de nascimento: ${cidade}

Pa√≠s: ${pais}

Gere um Mapa V√©dico completo, dividido em t√≥picos, com linguagem clara, espiritual e bem organizada. 

IMPORTANTE: O conte√∫do ser√° exibido em um site, ent√£o use HTML bem formatado com tags como <h2>, <p>, <strong>, <em>, <ul>, <li>, etc. Mantenha uma estrutura consistente e use espa√ßamento adequado entre os elementos. N√ÉO use marca√ß√µes de c√≥digo como \`\`\`html ou \`\`\` no in√≠cio ou fim do seu texto.

T√≥picos obrigat√≥rios (use os emojis exatamente como mostrados):

üìò Introdu√ß√£o ao Mapa V√©dico
Explique brevemente o que √© a astrologia v√©dica e como ela se diferencia da astrologia ocidental. Fale do uso do zod√≠aco sideral e da import√¢ncia do ascendente (Lagna) e das nakshatras.

üåü Nakshatra de Nascimento (Lua)

Nome da Nakshatra onde a Lua est√° posicionada

Caracter√≠sticas principais

Regente planet√°rio e s√≠mbolo

Influ√™ncia na personalidade

‚è´ Lagna (Ascendente V√©dico)

Signo do ascendente (pelo zod√≠aco sideral)

Efeitos sobre apar√™ncia, personalidade e destino

ü™ê Posicionamento dos Planetas

Explique a posi√ß√£o e o impacto dos seguintes planetas no mapa: Sol, Lua, Marte, Merc√∫rio, J√∫piter, V√™nus, Saturno, Rahu e Ketu

Relacione-os com temas pr√°ticos como emo√ß√µes, comunica√ß√£o, amor, espiritualidade etc.

Use linguagem simb√≥lica e acess√≠vel

üèõÔ∏è Casas de Destaque (Bhavas)

Escolha 2 ou 3 casas com maior influ√™ncia ou planetas importantes

Relacione com temas como miss√£o de vida, carreira, relacionamentos e desafios k√°rmicos

üßò Tend√™ncias K√°rmicas e Espirituais

Com base nos nodos (Rahu e Ketu), explique quais aprendizados e desafios espirituais a pessoa pode encontrar nesta encarna√ß√£o

Aborde temas como karma, dharma e evolu√ß√£o pessoal

üåà Recomenda√ß√µes V√©dicas Personalizadas

Sugira pr√°ticas como mantras, cores, pedras ou h√°bitos que podem equilibrar o mapa

D√™ conselhos de autoconhecimento e equil√≠brio energ√©tico

‚ú® Mensagem Final

Crie uma mensagem final de pelo menos 1500 caracteres, personalizada e inspiradora com base nos principais pontos do mapa

Estimule a busca interior e a expans√£o espiritual da pessoa`

    console.log("Enviando prompt para a API OpenAI")

    try {
      // Usar fetch diretamente para ter mais controle sobre a requisi√ß√£o
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model: "gpt-4o", // Atualizado para GPT-4o
          messages: [
            {
              role: "system",
              content:
                "Voc√™ √© um astr√≥logo v√©dico tradicional com experi√™ncia em astrologia Jyotish. Crie conte√∫do rico e detalhado com formata√ß√£o HTML bem estruturada. Use tags como <h2>, <p>, <strong>, <em>, <ul>, <li>, etc. Mantenha uma estrutura consistente e use espa√ßamento adequado entre os elementos. N√ÉO use marca√ß√µes de c√≥digo como ```html ou ``` no in√≠cio ou fim do seu texto. Forne√ßa o conte√∫do diretamente como HTML puro.",
            },
            {
              role: "user",
              content: prompt,
            },
          ],
          temperature: 0.7,
          max_tokens: 4000,
        }),
      })

      console.log("Status da resposta:", response.status)

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}))
        console.error("Erro da API OpenAI:", errorData)
        throw new Error(`Erro na API OpenAI: ${response.status}`)
      }

      const data = await response.json()
      console.log("Resposta recebida com sucesso")

      let result = data.choices[0].message.content
      console.log("Conte√∫do bruto recebido:", result.substring(0, 100) + "...")

      // Remover marca√ß√µes de c√≥digo Markdown
      result = result.replace(/^```html\s*/i, "").replace(/```\s*$/i, "")

      // Verificar se ainda h√° marca√ß√µes de c√≥digo e remov√™-las
      if (result.startsWith("```")) {
        const endIndex = result.indexOf("```", 3)
        if (endIndex !== -1) {
          result = result.substring(endIndex + 3)
        } else {
          result = result.substring(3)
        }
      }

      // Remover qualquer marca√ß√£o de c√≥digo no final
      result = result.replace(/```\s*$/g, "")

      // Estruturar o conte√∫do em se√ß√µes
      result = `<div class="mapa-vedico-content">${result}</div>`

      return result
    } catch (fetchError) {
      console.error("Erro detalhado na chamada fetch:", fetchError)
      throw fetchError
    }
  } catch (error) {
    console.error("Erro geral ao gerar mapa v√©dico:", error)
    throw error
  }
}
